version = '1.0.0-BUILD-SNAPSHOT'  // Bump this as you add features/fix bugs

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'

sourceSets {
  main {
    java.srcDirs 'src/main/java'
  }
  test {
    java.srcDirs 'src/test/java'
  }
}
  
war {
  archiveName = "${baseName}.war"
  destinationDir = file("./")      // Project root
}

project.webAppDirName = 'WebContent'

repositories {
   mavenCentral()
}

dependencies {
    compile group: 'org.springframework', name: 'spring-webmvc', version:'4.3.2.RELEASE'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.1.0'
    compile group: 'javax.servlet', name: 'jstl', version:'1.2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.springframework', name: 'spring-test', version:"4.3.2.RELEASE"
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.42' 

}

eclipse {
  classpath {
    downloadSources = true
  }
  project  {
    natures 'org.springframework.ide.eclipse.core.springnature', 
            'org.eclipse.buildship.core.gradleprojectnature'
  }
}



































/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.22'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/
